#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import sqlite3
import time
import threading
from math import floor, sqrt

from flask import Flask, request
from telegram import Bot, Update, ReplyKeyboardMarkup, ParseMode
from telegram.ext import (
    Dispatcher,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)
from telegram.utils.request import Request

# ==============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ==============================================================================

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç XP
ALL_CITIES = [
    {"name": "–¢—é–º–µ–Ω—å",         "link": "https://t.me/+3AjZ_Eo2H-NjYWJi", "chat_id": -1002241413860},
    {"name": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",    "link": "https://t.me/+wx20YVCwxmo3YmQy", "chat_id": -1002489311984},
    {"name": "–°–∞—Ö–∞–ª–∏–Ω",        "link": "https://t.me/+FzQ_jEYX8AtkMzNi", "chat_id": -1002265902434},
    {"name": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",     "link": "https://t.me/+lMTDVPF0syRiYzdi", "chat_id": -1002311750873},
    {"name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥","link": "https://t.me/+EWj9jKhAvV82NWIy","chat_id": -1002152780476},
    {"name": "–ú–æ—Å–∫–≤–∞",         "link": "https://t.me/+qokFNNnfhQdiYjQy", "chat_id": -1002182445604},
    {"name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",   "link": "https://t.me/+J2ESyZJyOAk2YzYy", "chat_id": -1002392430562},
    {"name": "–ò—Ä–∫—É—Ç—Å–∫",        "link": "https://t.me/+TAoCnfoePUJmNzhi", "chat_id": -1002255012184},
    {"name": "–û—Ä–µ–Ω–±—É—Ä–≥",       "link": "https://t.me/+-Y_1N0HnePUxZjZi", "chat_id": -1002316600732},
    {"name": "–ö—Ä—ã–º",           "link": "https://t.me/+uC5IEnQWsmFhM2Ni", "chat_id": -1002506541314},
    {"name": "–ß–∏—Ç–∞",           "link": "https://t.me/+yMeI0CjltLphZWYy", "chat_id": -1002563254789},
    {"name": "–í–æ–ª–≥–æ–≥—Ä–∞–¥",      "link": "https://t.me/+ODxw0mfq73M4NGFi", "chat_id": -1002562049204},
    {"name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",      "link": "https://t.me/+a9_1fWyGvAc1NzZi", "chat_id": -1002297851122},
    {"name": "–ü–µ—Ä–º—å",          "link": "https://t.me/+lgM27u0cnp8wNjAy", "chat_id": -1002298810010},
    {"name": "–°–∞–º–∞—Ä–∞",         "link": "https://t.me/+SLCllcYKCUFlNjk6", "chat_id": -1002589409715},
    {"name": "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",    "link": "https://t.me/+Dpb3ozk_4Dc5OTYy", "chat_id": -1002438533236},
    {"name": "–î–æ–Ω–µ—Ü–∫",         "link": "https://t.me/+nGkS5gfvvQxjNmRi", "chat_id": -1002328107804},
    {"name": "–•–∞–±–∞—Ä–æ–≤—Å–∫",      "link": "https://t.me/+SrnvRbMo3bA5NzVi", "chat_id": -1002480768813},
    {"name": "–ß–µ–ª—è–±–∏–Ω—Å–∫",      "link": "https://t.me/+ZKXj5rmcmMw0MzQy", "chat_id": -1002374636424},
    {"name": "–¢—É–ª–∞",           "link": "https://t.me/+ZCq3GsGagIQ1NzRi", "chat_id": -1002678281080},
]

# –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π (–Ω–µ–±–æ–µ–≤–æ–π) —Ä–∞—Å—Å—ã–ª–∫–∏
TEST_SEND_CHATS = [
    -1002596576819,  # –ú–æ—Å–∫–≤–∞ —Ç–µ—Å—Ç
    -1002584369534   # –¢—é–º–µ–Ω—å —Ç–µ—Å—Ç
]

# –ê–¥–º–∏–Ω—Å–∫–∏–µ ID
YOUR_ID = 296920330
ALLOWED_USER_IDS = {
    296920330,
    320303183,
    533773,
    327650534,
    533007308,
    136737738,
    1607945564
}

# XP-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
XP_PER_MESSAGE = 1          # +1 XP –∑–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
XP_PER_50_CHARS = 0.2       # +0.2 XP –∑–∞ –∫–∞–∂–¥—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
XP_MAX_BONUS = 4            # –º–∞–∫—Å–∏–º—É–º –±–æ–Ω—É—Å–∞ –∑–∞ –¥–ª–∏–Ω—É
XP_CAP_PER_MINUTE = 5       # –º–∞–∫—Å–∏–º—É–º XP, –Ω–∞—á–∏—Å–ª—è–µ–º—ã–π –∑–∞ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É SQLite
DB_PATH = "activity.db"

# ==============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FLASK –ò DISPATCHER
# ==============================================================================

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

req = Request(connect_timeout=20, read_timeout=20)
bot = Bot(token=BOT_TOKEN, request=req)
dispatcher = Dispatcher(bot, None, workers=4, use_context=True)

# ==============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ==============================================================================

def init_db():
    """
    –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª activity.db –∏ —Ç–∞–±–ª–∏—Ü—É xp, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç.
    –¢–∞–±–ª–∏—Ü–∞ xp —Ö—Ä–∞–Ω–∏—Ç chat_id, user_id, total_xp –∏ last_msg_ts.
    """
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS xp (
            chat_id     INTEGER NOT NULL,
            user_id     INTEGER NOT NULL,
            total_xp    REAL DEFAULT 0,
            last_msg_ts INTEGER DEFAULT 0,
            PRIMARY KEY(chat_id, user_id)
        )
        """
    )
    conn.commit()
    conn.close()

# –í—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
init_db()

# ==============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–ß–Å–¢–ê –ò –ó–ê–ü–ò–°–ò XP
# ==============================================================================

def calc_message_xp(text: str) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç XP –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:
      - –±–∞–∑–æ–≤–æ +1 XP,
      - +0.2 XP –∑–∞ –∫–∞–∂–¥—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º XP_MAX_BONUS).
    """
    base = XP_PER_MESSAGE
    length_bonus = min((len(text) // 50) * XP_PER_50_CHARS, XP_MAX_BONUS)
    return base + length_bonus

def record_xp(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (text / media) –≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö –∏–∑ ALL_CITIES:
    –Ω–∞—á–∏—Å–ª—è–µ—Ç XP –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É SQLite.
    """
    message = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã –∏–∑ ALL_CITIES
    valid_chat_ids = {city["chat_id"] for city in ALL_CITIES}
    if chat.type not in ("group", "supergroup") or chat.id not in valid_chat_ids:
        return
    if not user or user.is_bot:
        return

    text = message.text or message.caption or ""
    xp_gain = calc_message_xp(text)
    now_ts = int(time.time())
    minute_bound = now_ts - 60

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ XP –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ (chat_id, user_id)
    cur.execute(
        "SELECT total_xp, last_msg_ts FROM xp WHERE chat_id = ? AND user_id = ?",
        (chat.id, user.id)
    )
    row = cur.fetchone()
    if row:
        total_xp, last_msg_ts = row
    else:
        total_xp, last_msg_ts = 0.0, 0

    # –õ–∏–º–∏—Ç XP –∑–∞ –º–∏–Ω—É—Ç—É –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã:
    if last_msg_ts >= minute_bound and xp_gain > XP_CAP_PER_MINUTE:
        conn.close()
        return

    total_xp += xp_gain
    cur.execute(
        """
        INSERT INTO xp (chat_id, user_id, total_xp, last_msg_ts)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(chat_id, user_id) DO UPDATE SET
            total_xp = excluded.total_xp,
            last_msg_ts = excluded.last_msg_ts
        """,
        (chat.id, user.id, total_xp, now_ts)
    )
    conn.commit()
    conn.close()

# ==============================================================================
# –ö–û–ú–ê–ù–î–´ /rank –∏ /top (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
# ==============================================================================

def cmd_rank(update: Update, context: CallbackContext):
    """
    /rank [<city_name>]
    –ï—Å–ª–∏ <city_name> —É–∫–∞–∑–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ ALL_CITIES), –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç XP –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π (–≥–ª–æ–±–∞–ª—å–Ω—ã–π) XP –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è ALLOWED_USER_IDS.
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    args = context.args
    # –°–æ–±–∏—Ä–∞–µ–º map from city name (in lowercase) to chat_id
    city_map = {city["name"].lower(): city["chat_id"] for city in ALL_CITIES}

    if args:
        city_name = " ".join(args).lower()
        if city_name not in city_map:
            update.message.reply_text(
                f"–ì–æ—Ä–æ–¥ ¬´{' '.join(args)}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {', '.join(city_map.keys())}.",
                quote=True
            )
            return
        target_chat_id = city_map[city_name]

        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "SELECT total_xp FROM xp WHERE chat_id = ? AND user_id = ?",
            (target_chat_id, user.id)
        )
        row = cur.fetchone()
        conn.close()

        total = row[0] if row else 0.0
        level = floor(sqrt(total))
        to_next = (level + 1) ** 2 - total

        text = (
            f"üë§ –í–∞—à–∏ –æ—á–∫–∏ (XP) –≤ –≥—Ä—É–ø–ø–µ ¬´{city_name.title()}¬ª: *{int(total)}*\n"
            f"üéì –£—Ä–æ–≤–µ–Ω—å: *{level}*  (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å *{int(to_next)}* XP)\n\n"
            f"_XP –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ¬´{city_name.title()}¬ª. "
            "–ß—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å XP, –ø–∏—à–∏—Ç–µ —Ç—É–¥–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ._"
        )
        update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    else:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å—É–º–º–∏—Ä—É–µ–º XP –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute(
            "SELECT SUM(total_xp) FROM xp WHERE user_id = ?",
            (user.id,)
        )
        row = cur.fetchone()
        conn.close()

        total = row[0] if row and row[0] is not None else 0.0
        level = floor(sqrt(total))
        to_next = (level + 1) ** 2 - total

        text = (
            f"üë§ –í–∞—à–∏ —Å—É–º–º–∞—Ä–Ω—ã–µ –æ—á–∫–∏ (XP) –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º: *{int(total)}*\n"
            f"üéì –£—Ä–æ–≤–µ–Ω—å: *{level}*  (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å *{int(to_next)}* XP)\n\n"
            "_XP –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ, "
            "–Ω–∞–ø–∏—à–∏—Ç–µ /rank <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥–æ—Ä–æ–¥–∞>._"
        )
        update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def cmd_top(update: Update, context: CallbackContext):
    """
    /top [<city_name>] [N]
    –ï—Å–ª–∏ <city_name> —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.
    –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-N –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É XP –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é N=10.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è ALLOWED_USER_IDS.
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    args = context.args
    city_map = {city["name"].lower(): city["chat_id"] for city in ALL_CITIES}
    target_chat_id = None
    n = 10

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–¥–∞–ª–∏ –ª–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∑–∞—Ç–µ–º —á–∏—Å–ª–æ
    if args:
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ü–∏—Ñ—Ä–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ N
        if args[-1].isdigit():
            n = max(1, min(int(args[-1]), 50))
            city_part = " ".join(args[:-1]).strip().lower()
        else:
            city_part = " ".join(args).strip().lower()

        if city_part:
            if city_part not in city_map:
                update.message.reply_text(
                    f"–ì–æ—Ä–æ–¥ ¬´{city_part}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {', '.join(city_map.keys())}.",
                    quote=True
                )
                return
            target_chat_id = city_map[city_part]

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    if target_chat_id:
        # –¢–æ–ø –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
        cur.execute(
            "SELECT user_id, total_xp FROM xp WHERE chat_id = ? ORDER BY total_xp DESC LIMIT ?",
            (target_chat_id, n)
        )
        rows = cur.fetchall()
        title = f"–¢–æ–ø-{n} –≤ ¬´{args[0].title()}¬ª"
    else:
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø: —Å—É–º–º–∏—Ä—É–µ–º –ø–æ user_id
        cur.execute(
            """
            SELECT user_id, SUM(total_xp) AS sum_xp
            FROM xp
            GROUP BY user_id
            ORDER BY sum_xp DESC
            LIMIT ?
            """,
            (n,)
        )
        rows = cur.fetchall()
        title = f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø-{n} (–ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º)"

    conn.close()

    if not rows:
        update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", quote=True)
        return

    lines = [f"üèÜ *{title}:*"]
    rank = 1
    for user_id, xp in rows:
        try:
            user_obj = bot.get_chat(user_id)
            name = user_obj.username if user_obj.username else user_obj.full_name
        except:
            name = f"ID:{user_id}"
        lines.append(f"{rank}. {name} ‚Äî *{int(xp)}* XP")
        rank += 1

    update.message.reply_text("\n".join(lines), parse_mode=ParseMode.MARKDOWN)

# ==============================================================================
# –•–≠–ù–î–õ–ï–†–´ –ú–ï–ù–Æ –ò –†–ê–°–°–´–õ–û–ö (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ ALLOWED_USER_IDS)
# ==============================================================================

user_buffers = {}
user_waiting = {}
user_mode = {}

def main_menu_keyboard(uid):
    kb = [
        ["–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º"],
        ["–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –§–ê–ë–ê"]
    ]
    if uid == YOUR_ID:
        kb.insert(0, ["–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)

def menu(update: Update, context: CallbackContext):
    """
    /menu ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–ª–∏—á–∫–∞).
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard(user.id))

def start_test_broadcast(update: Update, context: CallbackContext):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ YOUR_ID).
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id != YOUR_ID:
        return

    user_buffers[user.id] = []
    user_waiting[user.id] = True
    user_mode[user.id] = "test"
    update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤–ª—è–π –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç. –¥.). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /sendall."
    )

def start_city_broadcast(update: Update, context: CallbackContext):
    """
    –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    user_buffers[user.id] = []
    user_waiting[user.id] = True
    user_mode[user.id] = "city"
    update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤–ª—è–π –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /sendall."
    )

def send_chat_list(update: Update, context: CallbackContext):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –§–ê–ë–ê (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    lines = ["–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –§–ê–ë–ê:"]
    for city in ALL_CITIES:
        lines.append(f"<a href='{city['link']}'>{city['name']}</a>")

    markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(
        "\n".join(lines),
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=markup
    )

def handle_back(update: Update, context: CallbackContext):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard(user.id))

def add_to_buffer(update: Update, context: CallbackContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –±—É—Ñ–µ—Ä).
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS or not user_waiting.get(user.id):
        return
    if update.message.text and update.message.text.startswith("/"):
        return

    user_buffers.setdefault(user.id, []).append(update.message)
    if len(user_buffers[user.id]) == 1:
        update.message.reply_text(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚û°Ô∏è /sendall, –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–π–¥–µ—Ç."
        )

def sendall(update: Update, context: CallbackContext):
    """
    /sendall ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã.
    """
    user = update.effective_user
    chat = update.effective_chat

    if chat.type != "private" or user.id not in ALLOWED_USER_IDS:
        return

    if not user_buffers.get(user.id):
        update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if user_mode.get(user.id) == "city":
        chat_ids = [c["chat_id"] for c in ALL_CITIES]
    else:
        chat_ids = TEST_SEND_CHATS

    for msg in user_buffers[user.id]:
        for chat_id in chat_ids:
            try:
                bot.copy_message(chat_id=chat_id, from_chat_id=msg.chat.id, message_id=msg.message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

    update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /menu")
    user_buffers[user.id] = []
    user_waiting[user.id] = False
    user_mode[user.id] = None

# ==============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–≠–ù–î–õ–ï–†–û–í
# ==============================================================================

# 1) XP-–∑–∞–ø–∏—Å—å (–≤—Å–µ —á–∞—Ç—ã –∏–∑ ALL_CITIES)
valid_chat_ids = {city["chat_id"] for city in ALL_CITIES}
dispatcher.add_handler(
    MessageHandler(
        Filters.chat(valid_chat_ids)
        & ~Filters.command
        & (Filters.text | Filters.photo | Filters.video | Filters.document),
        record_xp
    ),
    group=1
)

# 2) –ö–æ–º–∞–Ω–¥—ã /rank –∏ /top (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ ALLOWED_USER_IDS)
dispatcher.add_handler(CommandHandler("rank", cmd_rank), group=2)
dispatcher.add_handler(CommandHandler("top", cmd_top), group=2)

# 3) –•—ç–Ω–¥–ª–µ—Ä—ã –º–µ–Ω—é –∏ —Ä–∞—Å—Å—ã–ª–æ–∫ (–ª–∏—á–∫–∞, —Ç–æ–ª—å–∫–æ ALLOWED_USER_IDS)
dispatcher.add_handler(CommandHandler("menu", menu), group=2)
dispatcher.add_handler(MessageHandler(Filters.regex("^–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞$"), start_test_broadcast), group=2)
dispatcher.add_handler(MessageHandler(Filters.regex("^–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º$"), start_city_broadcast), group=2)
dispatcher.add_handler(MessageHandler(Filters.regex("^–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –§–ê–ë–ê$"), send_chat_list), group=2)
dispatcher.add_handler(MessageHandler(Filters.regex("^–ù–∞–∑–∞–¥$"), handle_back), group=2)
dispatcher.add_handler(CommandHandler("sendall", sendall), group=2)
dispatcher.add_handler(
    MessageHandler(
        Filters.chat_type.private & ~Filters.command,
        add_to_buffer
    ),
    group=2
)

# ==============================================================================
# WEBHOOK-–†–£–ß–ö–ê: –æ—Ç–≤–µ—á–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∞ process_update –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ —Ñ–æ–Ω–µ
# ==============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å HTTP 200 —Å—Ä–∞–∑—É
    threading.Thread(
        target=dispatcher.process_update,
        args=(update,)
    ).start()

    return "OK", 200

@app.route('/ping', methods=['GET'])
def ping():
    return "pong", 200

# ==============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK (–¥–ª—è Gunicorn/Render ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è)
# ==============================================================================

try:
    bot.delete_webhook(drop_pending_updates=True)
    bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

# ==============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò –õ–û–ö–ê–õ–¨–ù–û–ô –û–¢–õ–ê–î–ö–ï
# ==============================================================================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
